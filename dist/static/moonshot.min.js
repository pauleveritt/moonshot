/*

 Declare the module with dependencies, and nothing more.

 */

var appModules = [
  'ngAnimate', 'ngMessages', 'ui.router', 'restangular', 'satellizer',
  'mgcrea.ngStrap'
];

if (document.URL.indexOf(':9000') != -1) {
  appModules.push('ngMockE2E');
  appModules.push('moonshotMock');
}
angular.module('moonshot', appModules)
  .value('mockRest', {});


/*

 When running in dev mode, mock calls to the REST API
 but pass everything else through.

 */

(function (ng, mod, _, undefined) {
  'use strict';

  mod.run(function ($httpBackend, moonshotMockRest) {

    var mocks = moonshotMockRest.getMocks();

    // Iterate over all the registered mocks and register them
    _.map(mocks, function (moduleMocks) {
      // All the mocks registered for this module
      _(moduleMocks).forEach(function (mock) {
        var method = mock[0];
        var match = mock[1],
          responder = mock[2];
        $httpBackend.when(
          method,
          match)
          .respond(responder);
      });
    });

    // pass through everything else
    $httpBackend.whenGET(/\/*/).passThrough();
    $httpBackend.whenPOST(/\/*/).passThrough();
    $httpBackend.whenPUT(/\/*/).passThrough();

  });

}(angular, angular.module('moonshotMock', ['moonshot', 'ngMockE2E']), _));

(function () {

  function MoonshotMocks() {
    this.mocks = {};

    this.$get = function () {
      var mocks = this.mocks;
      return {
        getMocks: function () {
          return mocks;
        }
      };
    };

    this.addMock = function (k, v) {
      this.mocks[k] = v;
    };
  }

  function ModuleInit() {
    /* Empty for now */
  }

  angular.module("moonshot")
    .provider('moonshotMockRest', MoonshotMocks)
    .config(ModuleInit);


})();

(function () {

  function HeaderCtrl($rootScope, $state, $auth) {
    var ctrl = this;
    this.$rootScope = $rootScope;
    this.$state = $state;
    this.$auth = $auth;

    this.sections = _($state.get())
      .filter(function (state) {
                return _.has(state, "section");
              })
      .map(function (state) {
             var s = state.section;
             return {
               title: s.title,
               priority: s.priority ? s.priority : 99,
               state: state.name
             };
           })
      .sortBy("priority")
      .value();

    // When the state changes, update the subsections
    this.subsections = this.$state.current.subsections;
    $rootScope.$on('$stateChangeSuccess', ctrl.updateSubsections);
    $rootScope.$on('$stateChangeSuccess', function (event, toState) {
      $rootScope.$evalAsync(function () {
        // Wrap in $evalAsync as we are re-assigning a list
        ctrl.subsections = toState.subsections;
      });
    });
  }

  angular.module("moonshot")
    .controller("HeaderCtrl", HeaderCtrl);

})();

(function () {

  function RestLogger($q, $log, $injector) {

    return {
      request: function (config) {
        var isApi = config.url.substring(0, 5) == '/api/';
        if (1 == 1) {
          $log.info('request url/method/data',
                    config.url, config.method, config.data);
        }
        return config || $q.when(config);
      },
      response: function (response) {
        var config = response.config;
        var isApi = config.url.substring(0, 5) == '/api/';
        if (1 == 1) {
          var response_data = response.data;
          $log.info('response url/method/data',
                    config.url, config.method, response.data);
        }
        return response || $q.when(response);
      },
      responseError: function (rejection) {
        // Handle any 500 errors from the server with an alert
        var $alert = $injector.get('$alert');

        var url = rejection.config.url;
        if (rejection.status == 500) {
          var msg = 'Server error at: ' + url;
          $alert({
                   content: msg,
                   animation: 'fadeZoomFadeDown',
                   type: 'material',
                   duration: 3
                 });
        }
        return $q.reject(rejection);
      }

    };
  }


  function ModuleInit($httpProvider) {

    $httpProvider.interceptors.push('restLogger');
  }

  angular.module("moonshot")
    .factory('restLogger', RestLogger)
    .config(ModuleInit);

})();

(function () {

  function ModuleInit($stateProvider, $urlRouterProvider, RestangularProvider) {

    RestangularProvider.setBaseUrl('http://127.0.0.1:3000/api');

    $stateProvider
      .state('siteroot', {
               abstract: true,
               url: "",
               views: {
                 "header": {
                   templateUrl: '/app/header.partial.html',
                   controller: "HeaderCtrl as HeaderCtrl"
                 },
                 "content": {
                   template: '<div ui-view="content"></div>'
                 }
               }
             });

    $urlRouterProvider.rule(function ($injector, $location) {

      // Handle the case of going to index.html without #/
      if ($location.url() === "") {
        return "/";
      }

    });

  }

  angular.module("moonshot")
    .config(ModuleInit);
})();

(function () {

  function AuthzResponseRedirect($q, $injector) {

    return {
      responseError: function (rejection) {
        var
          $state = $injector.get('$state'),
          $alert = $injector.get('$alert');

        // We can get an /api/ response of forbidden for
        // some data needed in a view. Flash an alert saying that this
        // data was requested.
        var url = rejection.config.url;
        if (rejection.status == 403 || rejection.status == 401) {
          // Redirect to the login form
          $state.go('siteroot.login');
          var msg = 'Login required for: ' + url;
          $alert({
                   content: msg,
                   animation: 'fadeZoomFadeDown',
                   type: 'material',
                   duration: 3
                 });
        }
        return $q.reject(rejection);
      }
    };

  }

  function AuthzStateRedirect($rootScope, $state, $auth) {
    // A state can be annotated with a value indicating
    // the state requires login.

    $rootScope.$on("$stateChangeStart", function (event, toState) {
      if (toState.authenticate && !$auth.isAuthenticated()) {
        // User isnâ€™t authenticated
        $state.transitionTo("siteroot.login");
        event.preventDefault();
      }
    });
  }

  function ModuleInit($httpProvider, $authProvider) {

    $httpProvider.interceptors.push('authzRedirect');

    var baseUrl = 'http://127.0.0.1:3000';

    // Satellizer setup
    $authProvider.loginUrl = baseUrl + '/api/auth/login';
    $authProvider.signupUrl = baseUrl + '/api/auth/signup';
    $authProvider.twitter({
                            url: baseUrl + '/api/auth/twitter'
                          });
  }

  angular.module("moonshot")
    .factory('authzRedirect', AuthzResponseRedirect)
    .config(ModuleInit)
    .run(AuthzStateRedirect);

})();


(function () {


  function LoginCtrl($auth, $alert) {
    this.login = function ($valid, username, password) {
      $auth.login({ username: username, password: password })
        .then(function () {
                $alert({
                         content: 'You have successfully logged in',
                         animation: 'fadeZoomFadeDown',
                         type: 'material',
                         duration: 3
                       });
              })
        .catch(function (response) {
                 $alert({
                          content: response.data.message,
                          animation: 'fadeZoomFadeDown',
                          type: 'material',
                          duration: 3
                        });
               });

    };

    this.authenticate = function (provider) {
      $auth.authenticate(provider)
        .then(function () {
                $alert({
                         content: 'You have successfully logged in',
                         animation: 'fadeZoomFadeDown',
                         type: 'material',
                         duration: 3
                       });
              })
        .catch(function (response) {
                 $alert({
                          content: response.data,
                          animation: 'fadeZoomFadeDown',
                          type: 'material',
                          duration: 3
                        });
               });
    };
  }

  function LogoutCtrl($auth, $state, $alert) {
    $auth.logout()
      .then(function () {
              $alert({
                       content: 'You have been logged out',
                       animation: 'fadeZoomFadeDown',
                       type: 'material',
                       duration: 3
                     });
              $state.go('siteroot.site');
            });
  }

  function ProfileCtrl(profile) {
    this.profile = profile.data.user;
  }

  angular.module("moonshot")
    .controller("LoginCtrl", LoginCtrl)
    .controller("LogoutCtrl", LogoutCtrl)
    .controller('ProfileCtrl', ProfileCtrl);

})();

(function () {

  function ModuleInit(moonshotMockRestProvider) {

    var user = {
      id: 'admin',
      email: 'admin@x.com',
      first_name: 'Admin',
      last_name: 'Lastie',
      twitter: 'admin'
    };

    moonshotMockRestProvider.addMock(
      'auth',
      [
        [
          'POST',
          /api\/auth\/login/,
          function (method, url, data) {
            data = angular.fromJson(data);
            var un = data.username;
            var response;

            if (un === 'admin') {
              response = [204, {token: "mocktoken"}];
            } else {
              response = [401, {"message": "Invalid login or password"}];
            }

            return response;
          }],
        [
          'GET', /api\/me/,
          function () {
            return [200, {user: user}];
          }
        ]
      ]);
  }

  angular.module('moonshot')
    .config(ModuleInit);

})();



(function () {

  function Profile($http) {
    return {
      getProfile: function () {
        return $http.get('/api/me');
      },
      updateProfile: function (profileData) {
        return $http.put('/api/me', profileData);
      },
      getUsers: function () {
        return $http.get('/api/users');
      }
    };
  }

  angular.module("moonshot")
    .factory('Profile', Profile);

})();

(function () {

  function ModuleInit($stateProvider) {

    $stateProvider
      .state('siteroot.login', {
               url: '/login',
               views: {
                 'content': {
                   templateUrl: '/auth/login.partial.html',
                   controller: 'LoginCtrl as LoginCtrl'
                 }
               }
             })
      .state('siteroot.logout', {
               url: '/logout',
               views: {
                 'content': {
                   controller: 'LogoutCtrl as LogoutCtrl'
                 }
               }
             })
      .state('siteroot.profile', {
               url: '/profile',
               authenticate: true,
               views: {
                 'content': {
                   templateUrl: '/auth/profile.partial.html',
                   controller: 'ProfileCtrl as ProfileCtrl'
                 }
               },
               resolve: {
                 profile: function (Profile, $alert) {
                   return Profile.getProfile()
                     .error(function (error) {
                              $alert({
                                       content: error.message,
                                       animation: 'fadeZoomFadeDown',
                                       type: 'material',
                                       duration: 3
                                     });
                            });
                 }
               }
             });

  }

  angular.module("moonshot")
    .config(ModuleInit);
})();

(function () {

  function FoldersHomeCtrl() {

  }


  angular.module("moonshot")
    .controller("FoldersHomeCtrl", FoldersHomeCtrl);


})();

(function () {

  function ModuleInit($stateProvider) {

    var subsections = [
      {label: 'Home', state: 'folder-home'}
    ];

    $stateProvider
      .state("folder-home", {
               url: "/folder",
               parent: "siteroot",
               section: {
                 title: "Folders",
                 priority: 2
               },
               subsections: subsections,
               views: {
                 "content": {
                   templateUrl: "/folder/folder-home.partial.html"
                 }
               }
             });
  }

  angular.module("moonshot")
    .config(ModuleInit);

})();



(function () {

    function SiteFormCtrl($log) {
  }

  angular.module("moonshot")
    .controller("SiteFormCtrl", SiteFormCtrl);


})();

(function () {

  function ModuleInit($stateProvider) {

    var subsections = [
      {label: 'Home', state: 'siteroot.site'},
      {label: 'Form', state: 'siteroot.site.form'}
    ];

    $stateProvider
      .state("siteroot.site", {
               url: "/",
               section: {
                 title: "Home",
                 priority: 1
               },
               subsections: subsections,
               views: {
                 "content": {
                   templateUrl: "/site/home.partial.html"
                 }
               }
             })
      .state("siteroot.site.form", {
               url: "form",
               views: {
                 "content@siteroot": {
                   templateUrl: "/site/form.partial.html",
                   controller: "SiteFormCtrl as SiteFormCtrl"
                 }
               }
             });
  }

  angular.module("moonshot")
    .config(ModuleInit);

})();



(function () {

  function Traverser() {
    this.x = 1;
  }

  function ServiceConfig($urlRouterProvider, $stateProvider) {

    // The traverser state is the base-most state
    $stateProvider
      .state("traverser", {
      abstract: true,
      template: '<ui-view id="traverser"></ui-view>',
      controller: "TraverserCtrl as TraverserCtrl"
    });

    $urlRouterProvider.rule(function ($injector, $location) {

      // Handle the case of going to index.html without #/
      if ($location.url() == "") {
        return "/";
      }

    });

  }

  angular.module("moonshot")

    .service("Traverser", Traverser)
    .config(ServiceConfig)
    .run(
    function ($log, $rootScope, $state) {
      // Let's handle NotFound, Error, and Forbidden

      // Not Found. Tried to go to a state that doesn't exist
      $rootScope
        .$on(
        '$stateNotFound',
        function (event, unfoundState, fromState, fromParams) {
          event.preventDefault();
          $state.go("notfound", {unfoundStateTo: unfoundState.to});
        });

      // Error handler. Display errors that occur in state resolves etc.
      $rootScope
        .$on(
        '$stateChangeError',
        function (event, toState, toParams, fromState, fromParams, error) {
          event.preventDefault();
          $state.go("error", {toState: toState.name, error: error});
        });
    })

})();

(function () {

  function UsersHomeCtrl(users) {
    this.users = users.data.data;
  }

  angular.module('moonshot')
    .controller('UsersHomeCtrl', UsersHomeCtrl);
})();

(function () {

  function ModuleInit(moonshotMockRestProvider) {

    var usersData = {
      data: [
        {
          'id': 'bob',
          'title': 'Bob Jones'
        }
      ]
    };

    moonshotMockRestProvider.addMock(
      'users',
      [
        [
          'GET',
          /api\/users$/,
          function () {
            return [200, usersData];
          }]
      ]);
  }

  angular.module('moonshot')
    .config(ModuleInit);

})();



(function () {

  function Users($http) {
    return {
      getUsers: function () {
        return $http.get('/api/users');
      }
    };
  }

  angular.module("moonshot")
    .factory('Users', Users);

})();

(function () {

  function ModuleInit($stateProvider) {

    var subsections = [
      {label: 'Home', state: 'users'}
    ];

    $stateProvider
      .state('users', {
               url: '/users/',
               parent: 'siteroot',
               authenticate: true,
               section: {
                 title: 'Users',
                 priority: 1
               },
               subsections: subsections,
               views: {
                 content: {
                   templateUrl: '/user/users-home.partial.html',
                   controller: 'UsersHomeCtrl as UsersHomeCtrl'
                 }
               },
               resolve: {
                 users: function (Users, $alert) {
                   return Users.getUsers()
                     .error(function (error) {
                              $alert({
                                       content: error.message,
                                       animation: 'fadeZoomFadeDown',
                                       type: 'material',
                                       duration: 3
                                     });
                            });
                 }
               }
             });
  }

  angular.module('moonshot')
    .config(ModuleInit);

})();



//# sourceMappingURL=moonshot.min.js.map